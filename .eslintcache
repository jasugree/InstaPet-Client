[{"/Users/courtneydowns/Desktop/Blue Badge Project/blue-badge-client/InstaPet-Client/src/index.js":"1","/Users/courtneydowns/Desktop/Blue Badge Project/blue-badge-client/InstaPet-Client/src/reportWebVitals.js":"2","/Users/courtneydowns/Desktop/Blue Badge Project/blue-badge-client/InstaPet-Client/src/App.jsx":"3","/Users/courtneydowns/Desktop/Blue Badge Project/blue-badge-client/InstaPet-Client/src/auth/Auth.jsx":"4","/Users/courtneydowns/Desktop/Blue Badge Project/blue-badge-client/InstaPet-Client/src/posts/PostIndex.jsx":"5","/Users/courtneydowns/Desktop/Blue Badge Project/blue-badge-client/InstaPet-Client/src/auth/Login.jsx":"6","/Users/courtneydowns/Desktop/Blue Badge Project/blue-badge-client/InstaPet-Client/src/auth/Register.jsx":"7","/Users/courtneydowns/Desktop/Blue Badge Project/blue-badge-client/InstaPet-Client/src/posts/PostFeed.jsx":"8","/Users/courtneydowns/Desktop/Blue Badge Project/blue-badge-client/InstaPet-Client/src/posts/PostCreate.jsx":"9","/Users/courtneydowns/Desktop/Blue Badge Project/blue-badge-client/InstaPet-Client/src/navbar/Navbar.jsx":"10","/Users/courtneydowns/Desktop/Blue Badge Project/blue-badge-client/InstaPet-Client/src/posts/UploadingProfile.jsx":"11","/Users/courtneydowns/Desktop/Blue Badge Project/blue-badge-client/InstaPet-Client/src/posts/Uploading.jsx":"12","/Users/courtneydowns/Desktop/Blue Badge Project/blue-badge-client/InstaPet-Client/src/posts/Search.jsx":"13","/Users/courtneydowns/Desktop/Blue Badge Project/blue-badge-client/InstaPet-Client/src/posts/category.constants.js":"14","/Users/courtneydowns/Desktop/Blue Badge Project/blue-badge-client/InstaPet-Client/src/posts/LikeButton.jsx":"15","/Users/courtneydowns/Desktop/Blue Badge Project/blue-badge-client/InstaPet-Client/src/posts/UserFeed.jsx":"16","/Users/courtneydowns/Desktop/Blue Badge Project/blue-badge-client/InstaPet-Client/src/posts/PostUpdate.jsx":"17"},{"size":547,"mtime":1631498826222,"results":"18","hashOfConfig":"19"},{"size":362,"mtime":1631498826225,"results":"20","hashOfConfig":"19"},{"size":1091,"mtime":1631742179685,"results":"21","hashOfConfig":"19"},{"size":489,"mtime":1631498826221,"results":"22","hashOfConfig":"19"},{"size":2249,"mtime":1631743472671,"results":"23","hashOfConfig":"19"},{"size":2309,"mtime":1631745816982,"results":"24","hashOfConfig":"19"},{"size":3152,"mtime":1631742179686,"results":"25","hashOfConfig":"19"},{"size":2742,"mtime":1631742767402,"results":"26","hashOfConfig":"19"},{"size":3776,"mtime":1631745449185,"results":"27","hashOfConfig":"19"},{"size":2877,"mtime":1631743522389,"results":"28","hashOfConfig":"19"},{"size":1469,"mtime":1631742179686,"results":"29","hashOfConfig":"19"},{"size":1238,"mtime":1631742920239,"results":"30","hashOfConfig":"19"},{"size":3633,"mtime":1631732456730,"results":"31","hashOfConfig":"19"},{"size":879,"mtime":1631729611244,"results":"32","hashOfConfig":"19"},{"size":412,"mtime":1631742179686,"results":"33","hashOfConfig":"19"},{"size":2375,"mtime":1631742932936,"results":"34","hashOfConfig":"19"},{"size":3828,"mtime":1631744974441,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"15o3fq",{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"38"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},"/Users/courtneydowns/Desktop/Blue Badge Project/blue-badge-client/InstaPet-Client/src/index.js",[],["81","82"],"/Users/courtneydowns/Desktop/Blue Badge Project/blue-badge-client/InstaPet-Client/src/reportWebVitals.js",[],"/Users/courtneydowns/Desktop/Blue Badge Project/blue-badge-client/InstaPet-Client/src/App.jsx",["83"],"import React, { useState, useEffect } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./App.css\";\nimport PostIndex from \"./posts/PostIndex\";\nimport Auth from \"./auth/Auth\";\nimport LikeButton from \"./posts/LikeButton\";\n\n\nfunction App() {\n  const [sessionToken, setSessionToken] = useState(\"\");\n\n  useEffect(() => {\n    if (localStorage.getItem(\"token\")) {\n      setSessionToken(localStorage.getItem(\"token\"));\n    }\n  }, []);\n\n  const updateToken = (newToken) => {\n    localStorage.setItem(\"token\", newToken);\n    setSessionToken(newToken);\n    console.log(\"This is the session token ====>\" + sessionToken);\n  };\n\n  const clearToken = () => {\n    localStorage.clear();\n    setSessionToken(\"\");\n  };\n\n  const protectedViews = () => {\n    return sessionToken === localStorage.getItem(\"token\") ? (\n      <PostIndex clearToken={clearToken} token={sessionToken} />\n    ) : (\n      <Auth updateToken={updateToken} />\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      {/* <Sitebar clickLogout={clearToken}/> */}\n      {protectedViews()}\n    </div>\n  );\n}\n\nexport default App;\n","/Users/courtneydowns/Desktop/Blue Badge Project/blue-badge-client/InstaPet-Client/src/auth/Auth.jsx",[],"/Users/courtneydowns/Desktop/Blue Badge Project/blue-badge-client/InstaPet-Client/src/posts/PostIndex.jsx",["84","85","86","87","88"],"import React, { useState, useEffect } from \"react\";\nimport Sitebar from \"../navbar/Navbar\";\n\nconst PostIndex = (props) => {\n  // const [updateActive, setUpdateActive] = useState(false);\n  const [postToUpdate, setPostToUpdate] = useState({});\n\n  const [posts, setPosts] = useState(null);\n  const [users, setUsers] = useState(null);\n  const [mine, setMine] = useState(null);\n\n  const fetchMine = () => {\n    fetch(\"http://localhost:3001/post/mine\", {\n      method: \"GET\",\n      headers: new Headers({\n        \"Content-Type\": \"application/json\",\n        Authorization: props.token,\n      }),\n    })\n      .then((res) => res.json())\n      .then((feedData) => {\n        setMine(feedData);\n      });\n  };\n\n  useEffect(() => {\n    fetchMine();\n  }, []);\n\n  const fetchPosts = () => {\n    fetch(\"http://localhost:3001/post\", {\n      method: \"GET\",\n      headers: new Headers({\n        \"Content-Type\": \"application/json\",\n        Authorization: props.token,\n      }),\n    })\n      .then((res) => res.json())\n      .then((feedData) => {\n        setPosts(feedData);\n      });\n  };\n\n  useEffect(() => {\n    fetchPosts();\n  }, []);\n\n  const fetchUsers = () => {\n    fetch(\"http://localhost:3001/user\", {\n      method: \"GET\",\n      headers: new Headers({\n        \"Content-Type\": \"application/json\",\n        Authorization: props.token,\n      }),\n    })\n      .then((res) => res.json())\n      .then((UserData) => {\n        setUsers(UserData);\n      });\n  };\n\n  useEffect(() => {\n    fetchUsers();\n  }, []);\n\n  console.log(posts);\n  console.log(users);\n  return (\n    <div>\n      {/* <Sitebar  token={props.token} fetchPosts={fetchPosts} clickLogout={props.clearToken} />\n      <Container>\n        <Row>\n          <Col>\n            <PostFeed postToUpdate={postToUpdate} posts={posts} fetchUsers={fetchUsers} users={users} fetchPosts={fetchPosts} token={props.token}  />\n>>>>>>> bdd594e4f008a9b4f294bafdd91d79dd2223a2f9\n          </Col>\n        </Row>\n      </Container> */}\n\n      <Sitebar\n        token={props.token}\n        fetchPosts={fetchPosts}\n        setPosts={setPosts}\n        posts={posts}\n        users={users}\n        fetchMine={fetchMine}\n        mine={mine}\n        clickLogout={props.clearToken}\n      />\n    </div>\n  );\n};\n\nexport default PostIndex;\n","/Users/courtneydowns/Desktop/Blue Badge Project/blue-badge-client/InstaPet-Client/src/auth/Login.jsx",["89","90"],"import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Form, FormGroup, Label, Input, Button } from \"reactstrap\";\nimport BrandLogo from \"../InstaPet-logo.svg\";\n\nconst Login = (props) => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [toggle, setToggle] = useState(true);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    fetch(\"http://localhost:3001/user/login\", {\n      //1\n      method: \"POST\",\n      body: JSON.stringify({ user: { email: email, password: password } }),\n      headers: new Headers({\n        \"Content-Type\": \"application/json\",\n      }),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        props.updateToken(data.sessionToken);\n      }); //ADD CATCH\n  };\n\n  return (\n    <div className=\"wrapper\">\n      <div className=\"login-register\">\n        <img\n          src={BrandLogo}\n          alt=\"logo\"\n          class=\"auth-logo\"\n          style={{ width: 300, margin: \"auto\" }}\n        />\n        <Form onSubmit={handleSubmit}>\n          <FormGroup>\n            <Label htmlFor=\"email\">Email</Label>\n            <Input\n              type=\"email\"\n              onChange={(e) => setEmail(e.target.value)}\n              name=\"email\"\n              required\n              value={email}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Label htmlFor=\"password\">Password</Label>\n            <Input\n              onChange={(e) => setPassword(e.target.value)}\n              name=\"password\"\n              value={password}\n              required\n              type={toggle == true ? \"password\" : \"text\"}\n            />\n            <i\n              className={\n                toggle == true\n                  ? \"far fa-eye password-icon\"\n                  : \"far fa-eye-slash password-icon\"\n              }\n              onClick={() => setToggle(!toggle)}\n            />\n          </FormGroup>\n          <Button id=\"auth-login\" type=\"submit\">\n            Login\n          </Button>\n        </Form>\n        <p className=\"auth-toggle\">\n          Don't have an account?{\" \"}\n          <Link className=\"auth-toggle-link\" to=\"/register\" variant=\"body2\">\n            Sign up\n          </Link>\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default Login;\n","/Users/courtneydowns/Desktop/Blue Badge Project/blue-badge-client/InstaPet-Client/src/auth/Register.jsx",["91"],"import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Button,\n  Form,\n  FormGroup,\n  Label,\n  Input\n} from \"reactstrap\";\nimport UploadingProfile from \"../posts/UploadingProfile\";\nimport BrandLogo from \"../InstaPet-logo.svg\"\n\nconst Register = (props) => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [profileImage, setprofileImage] = useState('');\n  const [userName, setUserName] = useState(\"\");\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(\"hey there brother\");\n    fetch(\"http://localhost:3001/user/create\", {\n      //1\n      method: \"POST\",\n      body: JSON.stringify({\n        user: {\n          userName: userName,\n          profileImage: profileImage,\n          firstName: firstName,\n          lastName: lastName,\n          email: email,\n          password: password,\n        },\n      }),\n      headers: new Headers({\n        \"Content-Type\": \"application/json\",\n      }),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        props.updateToken(data.sessionToken);\n      });\n  };\n\n  return (\n    <div className=\"wrapper\">\n    <div className=\"login-register\">\n      <img src={BrandLogo} alt=\"logo\" class=\"auth-logo\" style={{width: 300, margin: \"auto\"}} />\n      <p className=\"register-intro\">Sign up to see photos from your friends and their pets.</p>\n      <Form onSubmit={handleSubmit}>\n        <FormGroup>\n              <UploadingProfile setprofileImage={setprofileImage} profileImage={profileImage} />\n        </FormGroup>\n        <FormGroup>\n          <Input\n            onChange={(e) => setUserName(e.target.value)}\n            name=\"firstName\"\n            placeholder=\"Username\"\n            value={userName} required\n          />\n        </FormGroup>\n        <FormGroup>\n          <Input\n            onChange={(e) => setFirstName(e.target.value)}\n            name=\"firstName\"\n            placeholder=\"First Name\"\n            value={firstName} required\n          />\n        </FormGroup>\n        <FormGroup>\n          <Input\n            onChange={(e) => setLastName(e.target.value)}\n            name=\"lastName\"\n            placeholder=\"Last Name\"\n            value={lastName} required\n          />\n        </FormGroup>\n        <FormGroup>\n          <Input\n            type=\"email\"\n            onChange={(e) => setEmail(e.target.value)}\n            name=\"email\"\n            placeholder=\"Email\"\n            value={email} required\n          />\n        </FormGroup>\n        <FormGroup>\n          <Input\n            onChange={(e) => setPassword(e.target.value)}\n            name=\"password\"\n            placeholder=\"Password\"\n            value={password} required\n          />\n        </FormGroup>\n        <Button id=\"auth-login\" type=\"submit\" style={{marginTop: \"5%\"}}>Signup</Button>\n      </Form>\n      <p className=\"auth-toggle\">Already have an account? <Link  className=\"auth-toggle-link\" to=\"/\" variant=\"body2\">Sign in here</Link>\n      </p>\n    </div>\n    </div>\n  );\n};\n\nexport default Register;\n","/Users/courtneydowns/Desktop/Blue Badge Project/blue-badge-client/InstaPet-Client/src/posts/PostFeed.jsx",["92","93","94"],"import React from \"react\";\nimport PostUpdate from \"./PostUpdate\";\n\nconst PostFeed = (props) => {\n  console.log(props.users);\n  console.log(props.posts);\n  console.log(props.token);\n\n  const joinArrays = (userArr, postArr) => {\n    if (!userArr || !postArr) return;\n    return postArr.map((post) => [\n      post,\n      ...userArr.filter((u) => u.id == post.owner),\n    ]);\n  };\n\n  console.log(joinArrays(props.users, props.posts));\n\n  const postMapper = () => {\n    if (!props.users || !props.posts) return;\n    return joinArrays(props.users, props.posts)\n      .slice(0)\n      .reverse()\n      .map((post, index) => {\n        const createdAt = new Date(post[0].createdAt);\n        const createdDate = createdAt.toLocaleDateString(\"en-US\");\n        const createdTime = createdAt.toLocaleTimeString(\"en-US\");\n        const checkData = () => {\n          return post.length > 0 ? (\n            <PostUpdate post={post[0]} token={props.token} />\n          ) : (\n            \"loading data\"\n          );\n        };\n        return (\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n            }}\n          >\n            <tr key={index}>\n              <div className=\"postContainer\" style={{ textAlign: \"left\" }}>\n                <div className=\"userHeader\">\n                  <img\n                    className=\"userProfilePic\"\n                    src={post[1].profileImage}\n                    alt=\"user\"\n                  />\n                  <span className=\"userName\">{post[1].userName}</span>\n                </div>\n                <div className=\"picture\">\n                  <img src={post[0].image} alt=\"post image\" />\n                </div>\n                <div className=\"postDetails\">\n                  <div className=\"timeLike\">\n                    <div className=\"time\">\n                      {createdDate} at {createdTime}\n                    </div>\n                    <div className=\"likes\">{post[0].likes}</div>\n                  </div>\n                  <div className=\"description\">\n                    <span className=\"userName-description\">\n                      {post[1].userName}\n                    </span>{\" \"}\n                    {post[0].description}\n                  </div>\n                  <PostUpdate\n                    post={post[0]}\n                    token={props.token}\n                    fetchPosts={props.fetchPosts}\n                  />\n                  {/* {checkData} */}\n                  <div className=\"category\">{post[0].category}</div>\n                </div>\n              </div>\n            </tr>\n          </div>\n        );\n      });\n  };\n\n  return <div>{postMapper()}</div>;\n};\n\nexport default PostFeed;\n","/Users/courtneydowns/Desktop/Blue Badge Project/blue-badge-client/InstaPet-Client/src/posts/PostCreate.jsx",[],"/Users/courtneydowns/Desktop/Blue Badge Project/blue-badge-client/InstaPet-Client/src/navbar/Navbar.jsx",[],"/Users/courtneydowns/Desktop/Blue Badge Project/blue-badge-client/InstaPet-Client/src/posts/UploadingProfile.jsx",["95","96"],"import React, { useState } from \"react\";\nimport { Container, FormGroup } from \"reactstrap\";\nimport PlaceholderImage from \"../placeholder-profile-pic.png\"\n\n\nconst UploadingProfile = (props) => {\n    const [image, setImage] = useState(\"\");\n  const { setprofileImage} = props;\n  const [loading, setLoading] = useState(false);\n\n  const UploadImage = async (e) => {\n    const files = e.target.files;\n    const data = new FormData();\n    data.append(\"file\", files[0]);\n    data.append(\"upload_preset\", \"Jake-test\");\n    setLoading(true);\n    const res = await fetch(\n      \"https://api.cloudinary.com/v1_1/jgreene/image/upload\",\n      {\n        method: \"POST\",\n        body: data,\n      }\n    );\n    const File = await res.json();\n\n    console.log(File.secure_url);\n    setImage(File.secure_url);\n    setprofileImage(File.secure_url);\n    setLoading(false);\n  };\n\n  return (\n    <div>\n      <Container>\n        <img id=\"profile-pic\" src={ image == \"\" ? (PlaceholderImage) :(image)} alt=\"\" />\n        <FormGroup id=\"uploader\">\n        <label for=\"profile-image-upload\" class=\"custom-file-upload\">\n          <input \n            style={{display: \"none\"}}\n            id=\"profile-image-upload\"\n            type=\"file\"\n            name=\"file\"\n            placeholder=\"Upload Image Here\"\n            onChange={UploadImage} required\n          />          Add your Photo\n          </label>\n        </FormGroup>\n      </Container>\n    </div>\n  );\n};\n\nexport default UploadingProfile;\n","/Users/courtneydowns/Desktop/Blue Badge Project/blue-badge-client/InstaPet-Client/src/posts/Uploading.jsx",["97","98"],"import React, { useState, useEffect } from \"react\";\nimport { Container, FormGroup } from \"reactstrap\";\n\nconst Uploading = (props) => {\n  const { setImage, image } = props;\n  const [loading, setLoading] = useState(false);\n\n  const UploadImage = async (e) => {\n    const files = e.target.files;\n    const data = new FormData();\n    data.append(\"file\", files[0]);\n    data.append(\"upload_preset\", \"Jake-test\");\n    setLoading(true);\n    const res = await fetch(\n      \"https://api.cloudinary.com/v1_1/jgreene/image/upload\",\n      {\n        method: \"POST\",\n        body: data,\n      }\n    );\n    const File = await res.json();\n\n    console.log(File.secure_url);\n    setImage(File.secure_url);\n    setLoading(false);\n  };\n\n  return (\n    <div>\n      <Container>\n        <h1>Upload Your Picture</h1>\n        <FormGroup>\n          <input\n            required\n            type=\"file\"\n            name=\"file\"\n            placeholder=\"Upload Image Here\"\n            onChange={UploadImage}\n          />\n          <br />\n          {loading ? (\n            <h3>Loading...</h3>\n          ) : (\n            <img src={image} style={{ width: \"300px\" }} />\n          )}\n        </FormGroup>\n      </Container>\n    </div>\n  );\n};\n\nexport default Uploading;\n","/Users/courtneydowns/Desktop/Blue Badge Project/blue-badge-client/InstaPet-Client/src/posts/Search.jsx",["99"],"import React, { useState, useEffect } from \"react\";\nimport {\n  Dropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n} from \"reactstrap\";\nimport {\n  AWESOME_AARDVARK,\n  COOL_CAT,\n  DARLING_DOGGO,\n  DELIGHTFUL_DOLPHIN,\n  FANTASTIC_FROG,\n  FIESTY_FOX,\n  HAPPY_HEDGEHOG,\n  LOVABLE_LLAMA,\n  NIFTY_NARWHAL,\n  PERFECT_PARROT,\n  PRETTY_PENGUIN,\n  PURPOSEFUL_PORPOISE,\n  ROCKIN_RABBIT,\n  SASSY_SLOTH,\n  SILLY_SHARK,\n  SLIPPERY_SNAKE,\n  SUPER_SEAL,\n  TUBULAR_TURTLE,\n  ZESTY_ZEBRA,\n} from \"./category.constants\";\n\nconst Search = (props) => {\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n\n  const toggle = () => setDropdownOpen((prevState) => !prevState);\n\n  const handleFetch = (category) => {\n    fetch(`http://localhost:3001/post/${category}`, {\n      headers: new Headers({\n        \"Content-Type\": \"application/json\",\n        Authorization: props.token,\n      }),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(data);\n        props.setPosts(data);\n      });\n  };\n\n  return (\n    <div className=\"search-dropdown .z-depth-1-half\">\n      <Dropdown isOpen={dropdownOpen} toggle={toggle}>\n        <DropdownToggle caret>Search by Category</DropdownToggle>\n        <DropdownMenu>\n          <DropdownItem onClick={() => handleFetch(AWESOME_AARDVARK)}>\n            {AWESOME_AARDVARK}\n          </DropdownItem>\n          <DropdownItem onClick={() => handleFetch(COOL_CAT)}>\n            {COOL_CAT}\n          </DropdownItem>\n          <DropdownItem onClick={() => handleFetch(DARLING_DOGGO)}>\n            {DARLING_DOGGO}\n          </DropdownItem>\n          <DropdownItem onClick={() => handleFetch(DELIGHTFUL_DOLPHIN)}>\n            {DELIGHTFUL_DOLPHIN}\n          </DropdownItem>\n          <DropdownItem onClick={() => handleFetch(FANTASTIC_FROG)}>\n            {FANTASTIC_FROG}\n          </DropdownItem>\n          <DropdownItem onClick={() => handleFetch(FIESTY_FOX)}>\n            {FIESTY_FOX}\n          </DropdownItem>\n          <DropdownItem onClick={() => handleFetch(HAPPY_HEDGEHOG)}>\n            {HAPPY_HEDGEHOG}\n          </DropdownItem>\n          <DropdownItem onClick={() => handleFetch(LOVABLE_LLAMA)}>\n            {LOVABLE_LLAMA}\n          </DropdownItem>\n          <DropdownItem onClick={() => handleFetch(NIFTY_NARWHAL)}>\n            {NIFTY_NARWHAL}\n          </DropdownItem>\n          <DropdownItem onClick={() => handleFetch(PERFECT_PARROT)}>\n            {PERFECT_PARROT}\n          </DropdownItem>\n          <DropdownItem onClick={() => handleFetch(PRETTY_PENGUIN)}>\n            {PRETTY_PENGUIN}\n          </DropdownItem>\n          <DropdownItem onClick={() => handleFetch(PURPOSEFUL_PORPOISE)}>\n            {PURPOSEFUL_PORPOISE}\n          </DropdownItem>\n          <DropdownItem onClick={() => handleFetch(ROCKIN_RABBIT)}>\n            {ROCKIN_RABBIT}\n          </DropdownItem>\n          <DropdownItem onClick={() => handleFetch(SASSY_SLOTH)}>\n            {SASSY_SLOTH}\n          </DropdownItem>\n          <DropdownItem onClick={() => handleFetch(SILLY_SHARK)}>\n            {SILLY_SHARK}\n          </DropdownItem>\n          <DropdownItem onClick={() => handleFetch(SLIPPERY_SNAKE)}>\n            {SLIPPERY_SNAKE}\n          </DropdownItem>\n          <DropdownItem onClick={() => handleFetch(SUPER_SEAL)}>\n            {SUPER_SEAL}\n          </DropdownItem>\n          <DropdownItem onClick={() => handleFetch(TUBULAR_TURTLE)}>\n            {TUBULAR_TURTLE}\n          </DropdownItem>\n          <DropdownItem onClick={() => handleFetch(ZESTY_ZEBRA)}>\n            {ZESTY_ZEBRA}\n          </DropdownItem>\n        </DropdownMenu>\n      </Dropdown>\n    </div>\n  );\n};\n\nexport default Search;\n","/Users/courtneydowns/Desktop/Blue Badge Project/blue-badge-client/InstaPet-Client/src/posts/category.constants.js",[],"/Users/courtneydowns/Desktop/Blue Badge Project/blue-badge-client/InstaPet-Client/src/posts/LikeButton.jsx",[],"/Users/courtneydowns/Desktop/Blue Badge Project/blue-badge-client/InstaPet-Client/src/posts/UserFeed.jsx",["100","101","102"],"import React, { useEffect } from \"react\";\nimport PostUpdate from \"./PostUpdate\";\n\nconst UserFeed = (props) => {\n  console.log(props.users);\n  console.log(props.mine);\n\n  const joinArrays = (userArr, postArr) => {\n    if (!userArr || !postArr) return;\n    return postArr.map((post) => [\n      post,\n      ...userArr.filter((u) => u.id == post.owner),\n    ]);\n  };\n\n  console.log(joinArrays(props.users, props.posts));\n\n  const postMapper = () => {\n    if (!props.users || !props.mine) return;\n    return joinArrays(props.users, props.mine)\n      .slice(0)\n      .reverse()\n      .map((post, index) => {\n        const createdAt = new Date(post[0].createdAt);\n        const createdDate = createdAt.toLocaleDateString(\"en-US\");\n        const createdTime = createdAt.toLocaleTimeString(\"en-US\");\n\n        return (\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n            }}\n          >\n            <tr key={index}>\n              <div className=\"postContainer\" style={{ textAlign: \"left\" }}>\n                <div className=\"userHeader\">\n                  <img\n                    className=\"userProfilePic\"\n                    src={post[1].profileImage}\n                    alt=\"user\"\n                  />\n                  <span className=\"userName\">\n                    {post[1].firstName} {post[1].lastName}\n                  </span>\n                </div>\n                <div className=\"picture\">\n                  <img src={post[0].image} alt=\"post image\" />\n                </div>\n                <div className=\"postDetails\">\n                  <div className=\"timeLike\">\n                    <div className=\"time\">\n                      {createdDate} at {createdTime}\n                    </div>\n                    <div className=\"likes\">{post[0].likes}</div>\n                  </div>\n                  <div className=\"description\">{post[0].description}</div>\n                  <PostUpdate\n                    post={post[0]}\n                    token={props.token}\n                    fetchPosts={props.fetchPosts}\n                  />\n                  <div className=\"category\">{post[0].category}</div>\n                </div>\n              </div>\n            </tr>\n          </div>\n        );\n      });\n  };\n\n  return <div>{postMapper()}</div>;\n};\n\nexport default UserFeed;\n","/Users/courtneydowns/Desktop/Blue Badge Project/blue-badge-client/InstaPet-Client/src/posts/PostUpdate.jsx",["103","104","105"],"import React, { useContext, useEffect, useState } from \"react\";\nimport {\n  Button,\n  Form,\n  Modal,\n  FormGroup,\n  Label,\n  Input,\n  ModalBody,\n  ModalHeader,\n} from \"reactstrap\";\nimport {\n  AWESOME_AARDVARK,\n  COOL_CAT,\n  DARLING_DOGGO,\n  DELIGHTFUL_DOLPHIN,\n  FANTASTIC_FROG,\n  FIESTY_FOX,\n  HAPPY_HEDGEHOG,\n  LOVABLE_LLAMA,\n  NIFTY_NARWHAL,\n  PERFECT_PARROT,\n  PRETTY_PENGUIN,\n  PURPOSEFUL_PORPOISE,\n  ROCKIN_RABBIT,\n  SASSY_SLOTH,\n  SILLY_SHARK,\n  SLIPPERY_SNAKE,\n  SUPER_SEAL,\n  TUBULAR_TURTLE,\n  ZESTY_ZEBRA,\n} from \"./category.constants.js\";\nimport Uploading from \"./Uploading\";\n\nconst PostUpdate = (props) => {\n  const [editImage, setEditImage] = useState(props.post.image);\n  const [editDesc, setEditDesc] = useState(props.post.description);\n  const [editCat, setEditCat] = useState(props.post.category);\n  const [editLike, setEditLike] = useState(props.post.like);\n  const [modal, setModal] = useState(false);\n\n  const toggle = () => setModal(!modal);\n\n  console.log(\"hello!!\");\n  console.log(props.post);\n\n  const postUpdate = (e, post) => {\n    e.preventDefault();\n    console.log(\"Test, test\");\n\n    fetch(`http://localhost:3001/post/update/${props.post.id}`, {\n      method: \"PUT\",\n      body: JSON.stringify({\n        post: {\n          image: editImage,\n          description: editDesc,\n          category: editCat,\n          likes: editLike,\n        },\n      }),\n      headers: new Headers({\n        \"Content-Type\": \"application/json\",\n        Authorization: props.token,\n      }),\n    })\n      .then((res) => res.json())\n      .then((logData) => {\n        console.log(logData);\n        setEditDesc(\"\");\n        setEditCat(\"\");\n        setEditImage(editImage);\n        setEditLike(editLike);\n        toggle();\n        props.fetchPosts();\n      })\n      .catch((error) => {\n        console.log(\"Error\", error);\n      });\n  };\n  return (\n    <div>\n      <Button color=\"danger\" size=\"sm\" onClick={toggle}>\n        Update Your Post\n      </Button>\n      <Modal isOpen={modal}>\n        <ModalHeader toggle={toggle}>Update Your Post</ModalHeader>\n        <ModalBody>\n          <Form onSubmit={postUpdate}>\n            <FormGroup>\n              <Label htmlFor=\"description\">Description</Label>\n              <Input\n                name=\"description\"\n                value={editDesc}\n                onChange={(e) => setEditDesc(e.target.value)}\n              />\n            </FormGroup>\n            <FormGroup>\n              <Label htmlFor=\"category\">Category</Label>\n              <Input\n                type=\"select\"\n                name=\"category\"\n                value={editCat}\n                required\n                onChange={(e) => setEditCat(e.target.value)}\n              >\n                <option>{AWESOME_AARDVARK}</option>\n                <option>{COOL_CAT}</option>\n                <option>{DARLING_DOGGO}</option>\n                <option>{DELIGHTFUL_DOLPHIN}</option>\n                <option>{FANTASTIC_FROG}</option>\n                <option>{FIESTY_FOX}</option>\n                <option>{HAPPY_HEDGEHOG}</option>\n                <option>{LOVABLE_LLAMA}</option>\n                <option>{NIFTY_NARWHAL}</option>\n                <option>{PERFECT_PARROT}</option>\n                <option>{PRETTY_PENGUIN}</option>\n                <option>{PURPOSEFUL_PORPOISE}</option>\n                <option>{ROCKIN_RABBIT}</option>\n                <option>{SASSY_SLOTH}</option>\n                <option>{SILLY_SHARK}</option>\n                <option>{SLIPPERY_SNAKE}</option>\n                <option>{SUPER_SEAL}</option>\n                <option>{TUBULAR_TURTLE}</option>\n                <option>{ZESTY_ZEBRA}</option>\n              </Input>\n            </FormGroup>\n\n            <Button type=\"submit\">Update</Button>\n          </Form>\n        </ModalBody>\n      </Modal>\n    </div>\n  );\n};\n\nexport default PostUpdate;\n",{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","severity":1,"message":"111","line":6,"column":8,"nodeType":"112","messageId":"113","endLine":6,"endColumn":18},{"ruleId":"110","severity":1,"message":"114","line":6,"column":10,"nodeType":"112","messageId":"113","endLine":6,"endColumn":22},{"ruleId":"110","severity":1,"message":"115","line":6,"column":24,"nodeType":"112","messageId":"113","endLine":6,"endColumn":39},{"ruleId":"116","severity":1,"message":"117","line":28,"column":6,"nodeType":"118","endLine":28,"endColumn":8,"suggestions":"119"},{"ruleId":"116","severity":1,"message":"120","line":46,"column":6,"nodeType":"118","endLine":46,"endColumn":8,"suggestions":"121"},{"ruleId":"116","severity":1,"message":"122","line":64,"column":6,"nodeType":"118","endLine":64,"endColumn":8,"suggestions":"123"},{"ruleId":"124","severity":1,"message":"125","line":54,"column":28,"nodeType":"126","messageId":"127","endLine":54,"endColumn":30},{"ruleId":"124","severity":1,"message":"125","line":58,"column":24,"nodeType":"126","messageId":"127","endLine":58,"endColumn":26},{"ruleId":"110","severity":1,"message":"128","line":7,"column":3,"nodeType":"112","messageId":"113","endLine":7,"endColumn":8},{"ruleId":"124","severity":1,"message":"125","line":13,"column":37,"nodeType":"126","messageId":"127","endLine":13,"endColumn":39},{"ruleId":"110","severity":1,"message":"129","line":28,"column":15,"nodeType":"112","messageId":"113","endLine":28,"endColumn":24},{"ruleId":"130","severity":1,"message":"131","line":54,"column":19,"nodeType":"132","endLine":54,"endColumn":63},{"ruleId":"110","severity":1,"message":"133","line":9,"column":10,"nodeType":"112","messageId":"113","endLine":9,"endColumn":17},{"ruleId":"124","severity":1,"message":"125","line":35,"column":43,"nodeType":"126","messageId":"127","endLine":35,"endColumn":45},{"ruleId":"110","severity":1,"message":"134","line":1,"column":27,"nodeType":"112","messageId":"113","endLine":1,"endColumn":36},{"ruleId":"135","severity":1,"message":"136","line":44,"column":13,"nodeType":"132","endLine":44,"endColumn":59},{"ruleId":"110","severity":1,"message":"134","line":1,"column":27,"nodeType":"112","messageId":"113","endLine":1,"endColumn":36},{"ruleId":"110","severity":1,"message":"134","line":1,"column":17,"nodeType":"112","messageId":"113","endLine":1,"endColumn":26},{"ruleId":"124","severity":1,"message":"125","line":12,"column":37,"nodeType":"126","messageId":"127","endLine":12,"endColumn":39},{"ruleId":"130","severity":1,"message":"131","line":49,"column":19,"nodeType":"132","endLine":49,"endColumn":63},{"ruleId":"110","severity":1,"message":"137","line":1,"column":17,"nodeType":"112","messageId":"113","endLine":1,"endColumn":27},{"ruleId":"110","severity":1,"message":"134","line":1,"column":29,"nodeType":"112","messageId":"113","endLine":1,"endColumn":38},{"ruleId":"110","severity":1,"message":"138","line":33,"column":8,"nodeType":"112","messageId":"113","endLine":33,"endColumn":17},"no-native-reassign",["139"],"no-negated-in-lhs",["140"],"no-unused-vars","'LikeButton' is defined but never used.","Identifier","unusedVar","'postToUpdate' is assigned a value but never used.","'setPostToUpdate' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchMine'. Either include it or remove the dependency array.","ArrayExpression",["141"],"React Hook useEffect has a missing dependency: 'fetchPosts'. Either include it or remove the dependency array.",["142"],"React Hook useEffect has a missing dependency: 'fetchUsers'. Either include it or remove the dependency array.",["143"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Label' is defined but never used.","'checkData' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'loading' is assigned a value but never used.","'useEffect' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'useContext' is defined but never used.","'Uploading' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"144","fix":"145"},{"desc":"146","fix":"147"},{"desc":"148","fix":"149"},"Update the dependencies array to be: [fetchMine]",{"range":"150","text":"151"},"Update the dependencies array to be: [fetchPosts]",{"range":"152","text":"153"},"Update the dependencies array to be: [fetchUsers]",{"range":"154","text":"155"},[742,744],"[fetchMine]",[1114,1116],"[fetchPosts]",[1486,1488],"[fetchUsers]"]