[{"/Users/courtneydowns/Desktop/Blue Badge Project/blue-badge-client/InstaPet-Client/src/index.js":"1","/Users/courtneydowns/Desktop/Blue Badge Project/blue-badge-client/InstaPet-Client/src/reportWebVitals.js":"2","/Users/courtneydowns/Desktop/Blue Badge Project/blue-badge-client/InstaPet-Client/src/App.jsx":"3","/Users/courtneydowns/Desktop/Blue Badge Project/blue-badge-client/InstaPet-Client/src/auth/Auth.jsx":"4","/Users/courtneydowns/Desktop/Blue Badge Project/blue-badge-client/InstaPet-Client/src/posts/PostIndex.jsx":"5","/Users/courtneydowns/Desktop/Blue Badge Project/blue-badge-client/InstaPet-Client/src/auth/Login.jsx":"6","/Users/courtneydowns/Desktop/Blue Badge Project/blue-badge-client/InstaPet-Client/src/auth/Register.jsx":"7","/Users/courtneydowns/Desktop/Blue Badge Project/blue-badge-client/InstaPet-Client/src/posts/PostFeed.jsx":"8","/Users/courtneydowns/Desktop/Blue Badge Project/blue-badge-client/InstaPet-Client/src/posts/PostCreate.jsx":"9","/Users/courtneydowns/Desktop/Blue Badge Project/blue-badge-client/InstaPet-Client/src/navbar/Navbar.jsx":"10","/Users/courtneydowns/Desktop/Blue Badge Project/blue-badge-client/InstaPet-Client/src/posts/UploadingProfile.jsx":"11","/Users/courtneydowns/Desktop/Blue Badge Project/blue-badge-client/InstaPet-Client/src/posts/Uploading.jsx":"12"},{"size":547,"mtime":1631137475126,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":1630855023831,"results":"15","hashOfConfig":"14"},{"size":1045,"mtime":1631379545758,"results":"16","hashOfConfig":"14"},{"size":489,"mtime":1631379271932,"results":"17","hashOfConfig":"14"},{"size":3437,"mtime":1631479192852,"results":"18","hashOfConfig":"14"},{"size":1495,"mtime":1631379282172,"results":"19","hashOfConfig":"14"},{"size":2517,"mtime":1631474937840,"results":"20","hashOfConfig":"14"},{"size":2128,"mtime":1631479136688,"results":"21","hashOfConfig":"14"},{"size":2575,"mtime":1631479007244,"results":"22","hashOfConfig":"14"},{"size":1194,"mtime":1631478982996,"results":"23","hashOfConfig":"14"},{"size":1268,"mtime":1631474937841,"results":"24","hashOfConfig":"14"},{"size":1264,"mtime":1631209889448,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"15o3fq",{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"28"},"/Users/courtneydowns/Desktop/Blue Badge Project/blue-badge-client/InstaPet-Client/src/index.js",[],["54","55"],"/Users/courtneydowns/Desktop/Blue Badge Project/blue-badge-client/InstaPet-Client/src/reportWebVitals.js",[],"/Users/courtneydowns/Desktop/Blue Badge Project/blue-badge-client/InstaPet-Client/src/App.jsx",[],"/Users/courtneydowns/Desktop/Blue Badge Project/blue-badge-client/InstaPet-Client/src/auth/Auth.jsx",[],"/Users/courtneydowns/Desktop/Blue Badge Project/blue-badge-client/InstaPet-Client/src/posts/PostIndex.jsx",["56","57","58"],"// //\n// import React, { useState, useEffect } from \"react\";\n// import { Container, Row, Col } from \"reactstrap\";\n// import Sitebar from \"../navbar/Navbar\";\n// import PostFeed from \"./PostFeed\";\n// import PostCreate from \"./PostCreate\";\n\n// const PostIndex = (props) => {\n//   const [posts, setPosts] = useState(null);\n//   const [users, setUsers] = useState(null);\n\n//   const fetchPosts = () => {\n//     fetch(\"http://localhost:3001/post\", {\n//       method: \"GET\",\n//       headers: new Headers({\n//         \"Content-Type\": \"application/json\",\n//         Authorization: props.token,\n//       }),\n//     })\n//       .then((res) => res.json())\n//       .then((feedData) => {\n//         setPosts(feedData);\n//       });\n//   };\n\n//   useEffect(() => {\n//     fetchPosts();\n//   }, []);\n\n//   const fetchUsers = () => {\n//     fetch(\"http://localhost:3001/user\", {\n//       method: \"GET\",\n//       headers: new Headers({\n//         \"Content-Type\": \"application/json\",\n//         Authorization: props.token,\n//       }),\n//     })\n//       .then((res) => res.json())\n//       .then((UserData) => {\n//         setUsers(UserData);\n//       });\n//   };\n\n//   useEffect(() => {\n//     fetchUsers();\n//   }, []);\n//   console.log(posts);\n//   console.log(users);\n//   return (\n//     <div>\n//       <Sitebar\n//         token={props.token}\n//         fetchPosts={fetchPosts}\n//         clickLogout={props.clearToken}\n//       />\n//       <Container>\n//         <Row>\n//           <Col>\n//             <PostFeed\n//               posts={posts}\n//               fetchUsers={fetchUsers}\n//               users={users}\n//               fetchPosts={fetchPosts}\n//               token={props.token}\n//             />\n//           </Col>\n//         </Row>\n//       </Container>\n//     </div>\n//   );\n// };\n\n// export default PostIndex;\n\nimport React, { useState, useEffect } from \"react\";\nimport { Container, Row, Col } from \"reactstrap\";\nimport Sitebar from \"../navbar/Navbar\";\nimport PostFeed from \"./PostFeed\";\nimport PostCreate from \"./PostCreate\";\n\nconst PostIndex = (props) => {\n  const [posts, setPosts] = useState(null);\n  const [users, setUsers] = useState(null);\n\n  const fetchPosts = () => {\n    fetch(\"http://localhost:3001/post\", {\n      method: \"GET\",\n      headers: new Headers({\n        \"Content-Type\": \"application/json\",\n        Authorization: props.token,\n      }),\n    })\n      .then((res) => res.json())\n      .then((feedData) => {\n        setPosts(feedData);\n      });\n  };\n\n  useEffect(() => {\n    fetchPosts();\n  }, []);\n\n  const fetchUsers = () => {\n    fetch(\"http://localhost:3001/user\", {\n      method: \"GET\",\n      headers: new Headers({\n        \"Content-Type\": \"application/json\",\n        Authorization: props.token,\n      }),\n    })\n      .then((res) => res.json())\n      .then((UserData) => {\n        setUsers(UserData);\n      });\n  };\n\n  useEffect(() => {\n    fetchUsers();\n  }, []);\n  console.log(posts);\n  console.log(users);\n  return (\n    <div>\n      <Sitebar\n        token={props.token}\n        fetchPosts={fetchPosts}\n        clickLogout={props.clearToken}\n      />\n      <Container>\n        <Row>\n          <Col>\n            <PostFeed\n              posts={posts}\n              fetchUsers={fetchUsers}\n              users={users}\n              fetchPosts={fetchPosts}\n              token={props.token}\n            />\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n};\n\nexport default PostIndex;\n","/Users/courtneydowns/Desktop/Blue Badge Project/blue-badge-client/InstaPet-Client/src/auth/Login.jsx",[],"/Users/courtneydowns/Desktop/Blue Badge Project/blue-badge-client/InstaPet-Client/src/auth/Register.jsx",[],"/Users/courtneydowns/Desktop/Blue Badge Project/blue-badge-client/InstaPet-Client/src/posts/PostFeed.jsx",[],"/Users/courtneydowns/Desktop/Blue Badge Project/blue-badge-client/InstaPet-Client/src/posts/PostCreate.jsx",[],"/Users/courtneydowns/Desktop/Blue Badge Project/blue-badge-client/InstaPet-Client/src/navbar/Navbar.jsx",[],"/Users/courtneydowns/Desktop/Blue Badge Project/blue-badge-client/InstaPet-Client/src/posts/UploadingProfile.jsx",["59"],"import React, { useState } from \"react\";\nimport { Container, FormGroup } from \"reactstrap\";\n\n\nconst UploadingProfile = (props) => {\n    const [image, setImage] = useState(\"\");\n  // const { setImage, image } = props;\n  const [loading, setLoading] = useState(false);\n\n  const UploadImage = async (e) => {\n    const files = e.target.files;\n    const data = new FormData();\n    data.append(\"file\", files[0]);\n    data.append(\"upload_preset\", \"Jake-test\");\n    setLoading(true);\n    const res = await fetch(\n      \"https://api.cloudinary.com/v1_1/jgreene/image/upload\",\n      {\n        method: \"POST\",\n        body: data,\n      }\n    );\n    const File = await res.json();\n\n    console.log(File.secure_url);\n    setImage(File.secure_url);\n    setLoading(false);\n  };\n\n  return (\n    <div>\n      <Container>\n        <h1>Upload Your Picture</h1>\n        <FormGroup>\n          <input\n            type=\"file\"\n            name=\"file\"\n            placeholder=\"Upload Image Here\"\n            onChange={UploadImage}\n          />\n          <br />\n          {loading ? (\n            <h3>Loading...</h3>\n          ) : (\n            <img src={image} style={{ width: \"300px\" }} />\n          )}\n        </FormGroup>\n      </Container>\n    </div>\n  );\n};\n\nexport default UploadingProfile;\n","/Users/courtneydowns/Desktop/Blue Badge Project/blue-badge-client/InstaPet-Client/src/posts/Uploading.jsx",["60","61"],"import React, { useState, useEffect } from \"react\";\nimport { Container, FormGroup } from \"reactstrap\";\n\nconst Uploading = (props) => {\n  //   const [image, setImage] = useState(\"\");\n  const { setImage, image } = props;\n  const [loading, setLoading] = useState(false);\n\n  const UploadImage = async (e) => {\n    const files = e.target.files;\n    const data = new FormData();\n    data.append(\"file\", files[0]);\n    data.append(\"upload_preset\", \"Jake-test\");\n    setLoading(true);\n    const res = await fetch(\n      \"https://api.cloudinary.com/v1_1/jgreene/image/upload\",\n      {\n        method: \"POST\",\n        body: data,\n      }\n    );\n    const File = await res.json();\n\n    console.log(File.secure_url);\n    setImage(File.secure_url);\n    setLoading(false);\n  };\n\n  return (\n    <div>\n      <Container>\n        <h1>Upload Your Picture</h1>\n        <FormGroup>\n          <input\n            type=\"file\"\n            name=\"file\"\n            placeholder=\"Upload Image Here\"\n            onChange={UploadImage}\n          />\n          <br />\n          {loading ? (\n            <h3>Loading...</h3>\n          ) : (\n            <img src={image} style={{ width: \"300px\" }} />\n          )}\n        </FormGroup>\n      </Container>\n    </div>\n  );\n};\n\nexport default Uploading;\n",{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":79,"column":8,"nodeType":"68","messageId":"69","endLine":79,"endColumn":18},{"ruleId":"70","severity":1,"message":"71","line":101,"column":6,"nodeType":"72","endLine":101,"endColumn":8,"suggestions":"73"},{"ruleId":"70","severity":1,"message":"74","line":119,"column":6,"nodeType":"72","endLine":119,"endColumn":8,"suggestions":"75"},{"ruleId":"76","severity":1,"message":"77","line":45,"column":13,"nodeType":"78","endLine":45,"endColumn":59},{"ruleId":"66","severity":1,"message":"79","line":1,"column":27,"nodeType":"68","messageId":"69","endLine":1,"endColumn":36},{"ruleId":"76","severity":1,"message":"77","line":44,"column":13,"nodeType":"78","endLine":44,"endColumn":59},"no-native-reassign",["80"],"no-negated-in-lhs",["81"],"no-unused-vars","'PostCreate' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchPosts'. Either include it or remove the dependency array.","ArrayExpression",["82"],"React Hook useEffect has a missing dependency: 'fetchUsers'. Either include it or remove the dependency array.",["83"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"84","fix":"85"},{"desc":"86","fix":"87"},"Update the dependencies array to be: [fetchPosts]",{"range":"88","text":"89"},"Update the dependencies array to be: [fetchUsers]",{"range":"90","text":"91"},[2524,2526],"[fetchPosts]",[2896,2898],"[fetchUsers]"]